3+4
3 + 4 - 1 * 8 / 2
x <- 3 + 4 - 1 * 8 / 2
x
is.numeric(x)
class(x)
typeof(x)
x <- c(1L, 2L, 3L)
x
typeof(x)
x <- c(1L, 1.2, "hi")
x
typeof(x)
clear
exit
ls
dir
pwd
dirr
//
cd
cd //
cd /
exit
/
x <- 1:10\
x <- 1:10
x
x * 5
length(x)
sum(x)
length(x)
x
mean(x)
median(x)
range(x)
max(x)
min(x)
x
x > 5
sum(x > 5)
x[x > 5] <- 0
x
x <- 1:10
x
x[0]
x[2:4]
x[c(2:4, 8)]
x[11]
z <- list(1, 2, 3)
z
z[[1]]
z[]
y <- list('a', TRUE, z)
typeof(y)
length(y)
length(y[[3]])
length(y[[2]])
length(y[[1]])
x <- 1:5
x
is.atomic(x)
w <- unlist(y)
w
y
w
m <- matrix(1:10, nrow=2)
m
clear
clear x
q()
x <- c(1, 2, 3)
y <- c(1.1, 2.2, 3.3)
z <- c('a', 'b', 'c')
df <- data.frame(cbind(x, y, z))
x
y
z
df
df
df$x
x
df$y
df$z
colnames(df) <- c('Tickets', 'Discount', "Section")
df
data(airquality)
head(airquality)
head(airquality, n=2)
df = data.frame(airquality)
df
head(df)
names(df)
dim(df)
summary(df)
str(df'')
str(df)
tail(df)
df <- airquality[]
df
df$Ozone[is.na(df$Ozone)] <- mean(df$Ozone, na.rm=TRUE)
mean(df$Ozone)
hist(airquality$Temp)
plot(airquality$Temp)
plot(airquality$Temp, airquality$Ozone)
plot(airquality$Ozone, airquality$Temp, pch=16, col="blue", cex=1.5, main="Airquality", xlab="Ozone", ylab="Temperature")
plot(airquality$Ozone, airquality$Temp, pch=16, col="red", cex=1.5, main="Airquality", xlab="Ozone", ylab="Temperature")
plot(airquality$Ozone, airquality$Temp, pch=16, col="green", cex=1.5, main="Airquality", xlab="Ozone", ylab="Temperature")
plot(airquality$Ozone, airquality$Temp, pch=16, col="blue", cex=1.5, main="Airquality", xlab="Ozone", ylab="Temperature")
cor(airquality[1:4], use="complete")
pairs(airquality[1:4])
df <- airquality[]
df$Hot <- FALSE
df$Hot[df$Temp>89] <- TRUE
df$Hot <- factor(df$Hot)
df$Hot[40:46]
plot(df$Hot)
par(mfrow = c(1, 3))
plot(df$Hot)
cdplot(df$Temp, df$Hot)
plot(df$Temp, df$Hot)
ls()
rm(list=ls())
ls()
install.packages()
library()
require()
if(!require("mlbench")) {
install.packages("mlbench")
}
data(PimaIndiansDiabetes2)
str(PimaIndiansDiabetes2)
if(!require("mlbench")) {
install.packages("mlbench")
}
data(PimaIndiansDiabetes2)
str(PimaIndiansDiabetes2)
?PimaIndiansDiabetes2
str(?PimaIndiansDiabetes2)
?PimaIndiansDiabetes2
sapply(PimaIndiansDiabetes2, function(x) sum(is.na(x)))
clear
exit
q()
demo(graphics)
clear
ls
dir
pwd
cd
opar <- par()
par(mfrow=c(1, 2))
hist(...)
hist(...
plot(...)
par(opar)
hist
hist()
q())
q()
v1 <- c(1, 2, 3)
5*v1
5*V1
ls
v<-c(1, 2, 3)
v
v[0]
v[1]
v[2]
v[3]
v <- c(2, 4, 6)
v[0]
v[1]
v[2]
v[3]
load MASS
MASS
library(MASS)
install.packages("MASS")
install.packages("MASS")
library()
library(MASS)
library("MASS")
library(MASS)
force(Boston)
data(Boston)
library(MASS)
data(Boston)
str()
str(data)
str(data(Boston))
>Boston
?Boston
Boston
head()
head(Boston)
tail(Boston, 2)
str(Boston)
str(Boston)
knitr::opts_chunk$set(echo = TRUE)
library(MASS)
data(Boston)
str(Boston)
?Boston
head(Boston)
Boston[5]
Boston[[5]]
Boston(5)
Boston[5, ]
View(Boston)
head(Boston)[, 1]
colnames(Boston)
mean(Boston[ ,1])
mean(Bostonp[, "crim"])
mean(Boston[, "crim"])
median(Boston[, "crim"])
range(Boston[, "crim"])
crimHistogram <- density(Boston$crim)
hist(crimHistogram, main="Per Capita Crime Rate by Town in Boston Suburbs")
hist(Boston[, "crim"], main="Per Capita Crime Rate by Town in Boston Suburbs")
?Boston
cor(Boston[Boston["crim", "medv"]])
cor(Boston["crim", "medv"])
crim_medv <- c(Boston["crim"], Boston["medv"])
cor(crim_medv)
cor(Boston["crim"], Boston["medv"]])
cor(Boston["crim"], Boston["medv"])
head(Boston)
tail(Boston, n=2)
Boston[5, ]
head(Boston)[, 1]
colnames(Boston)
cor(Boston["rm"], Boston["medv"])
plot(Boston["rm"], Boston["medv"])
plot(Boston$rm, Boston$medv)
plot(Boston$rm, Boston$medv, col="red", pch=23)
plot(Boston$rm, Boston$medv, col="red", pch="23")
plot(Boston$rm, Boston$medv, col="red", pch=24)
plot(Boston$rm, Boston$medv, col="red", pch=23)
plot(Boston$rm, Boston$medv, col="red", pch=5)
plot(Boston$rm, Boston$medv, col="red", pch=23)
plot(Boston$rm, Boston$medv, pch=23, col="red")
plot(Boston$rm, Boston$medv, pch=23, col="red")
plot(Boston$rm, Boston$medv, pch=23, col="blue")
plot(Boston$rm, Boston$medv, pch=23, col="red")
plot(Boston$rm, Boston$medv, col="red", pch=23)
plot(Boston$rm, Boston$medv, col="red", pch=5)
plot(Boston$rm, Boston$medv, col="red", pch=23)
?Boston
plot(Boston$rm, Boston$medv, col="red", pch=23, main="Median value of homes and Number of rooms in Boston Suburbs")
plot(Boston$rm, Boston$medv, col="red", pch=23, main="Median value of homes and Number of rooms in Boston Suburbs", xlab="Number of Rooms", ylab="Median value /$1000")
?Boston
plot(Boston$rm, Boston$medv, col="red", pch=23, main="Median value of homes and Number of rooms in Boston Suburbs", xlab="Number of Rooms", ylab="Median value /$1000s")
plot(Boston$chas, Boston$medv)
?Boston
plot(Boston$chas, Boston$medv)
cdplot(Boston$chas, Boston$medv)
plot(factor(Boston$chas), Boston$medv)
?Boston
summary(rad)
summary(Boston$rad)
unique(Boston$rad)
unique(Boston$rad)
View(Boston)
typeof(Boston$rad)
sum(Boston$rad == 24)
nrow(Boston)
sum(Boston$rad == 24) / nrow(Boston)
ifelse(Boston$rad == 24, factor(far) <- TRUE, factor(far) <- FALSE)
ifelse(Boston$rad == 24, far <- TRUE, far <- FALSE)
far <- factor(far)
plot(far, Boston$medv)
plot(factor(far), Boston$medv)
ifelse(Boston$rad == 24, far <- TRUE, far <- FALSE)
ifelse(Boston$rad == 24, far <- TRUE, far <- FALSE)
plot(far, Boston$medv)
plot(factor(far), Boston$medv)
length()
length(far)
length(factor(far))
far
factor(far)
ifelse(Boston$rad == 24, far <- TRUE, far <- FALSE)
plot(factor(ifelse(Boston$rad == 24, far <- TRUE, far <- FALSE)), Boston$medv)
plot(Boston$medv, factor(ifelse(Boston$rad == 24, far <- TRUE, far <- FALSE)))
> plot(factor(ifelse(Boston$rad == 24, far <- TRUE, far <- FALSE)), Boston$medv)
plot(factor(ifelse(Boston$rad == 24, far <- TRUE, far <- FALSE)), Boston$medv)
plot(factor(ifelse(Boston$rad == 24, far <- TRUE, far <- FALSE)), Boston$medv)
summary(Boston$crim)
summary(Boston$crim, Boston$rm)
summary(Boston$crim)
summar(Boston$rm)
summary(Boston$rm)
which.max(Boston$medv)
Boston[1, 2]
summary(Boston[, 1])
summary(Boston$crim)
max <- which.max(Boston$medv)
max
Boston[which.max(Boston$medv), c(1, 6, 13, 14)]
plot(factor(ifelse(Boston$rad == 24, far <- TRUE, far <- FALSE)), Boston$medv, main="Median housing value and Accessibility to radial highways", xlab="Index of accessibility to radial highways is 24", ylab="Median value /$1000s")
summary(Boston[, c(1, 6, 13, 14)])
?Boston
is.factor(Boston$chas)
cor(Boston$chas, Boston$medv)
test
rm <- Boston$rm
medv <- Boston$medv
sum(rm)
sum(medv)
mean(rm)
mean(medv)
median(rm)
median(medv)
range(rm)
range(medv)
cov(rm, medv)
cor(rm, medv)
cov(rm, medv) * 506
data(Boston) #load data into memory
str(Boston) #overview of data
# M
origin <- factor(Auto$origin)
# M
AUto$origin <- factor(Auto$origin)
names(df)
nrows(df)
df <- read.csv("Admission_Predict.csv")
df <- read.csv("Admission_Predict.csv")
df <- read.csv("Admission_Predict.csv")
365/400
35/400
# Build a model predicting Admit from all predictors
glm0 <- glm(Admit~., data=train, family=binomial)
# Use seed to guarantee same split every run
set.seed(1234)
# Divide into train/test data
i <- sample(1:nrow(df), 0.75*nrow(df), replace=FALSE)
# Load the data
df <- read.csv("Admission_Predict.csv")
# Take a look at the first few rows
head(df)
# Attach data set since we are only using one and we do not have to consider name collisions
attach(df)
# Make Research a factor
Research <- factor(Research)
# Get rid of the Serial No column
df <- df[2:9]
# Make a new column that is a binary factor based on if Chance.of.Admit > 0.5
Admit <- as.factor(ifelse(Chance.of.Admit > 0.5, 1, 0))
# Output column names
names(df)
# Output summary
summary(df)
# Create side by side graphs
par(mfrow=c(1, 2))
# GRE vs. Admit
plot(Admit, GRE.Score, main="GRE Score vs. Admit", xlab="Admit", ylab="GRE Score")
plot(Admit, TOEFL.Score, main="TOEFL Score vs. Admit", xlab="Admit", ylab="TOEFL Score")
# Use seed to guarantee same split every run
set.seed(1234)
# Divide into train/test data
i <- sample(1:nrow(df), 0.75*nrow(df), replace=FALSE)
train <- df[i, ]
test <- df[-i, ]
# Build a model predicting Admit from all predictors
glm0 <- glm(Admit~., data=train, family=binomial)
# Load the data
df <- read.csv("Admission_Predict.csv")
# Take a look at the first few rows
head(df)
# Make Research a factor
df$Research <- df$factor(Research)
probs <- predict(glm1, newdata=test, type="response")
probspred <- ifelse(probs > 0.5, 1, 0)
df <- read.csv("Admission_Predict.csv")
clear
source('~/CS 4375/project1/naive_bayes.R', echo=TRUE)
setwd("~/CS 4375/project1")
source('~/CS 4375/project1/naive_bayes.R', echo=TRUE)
source('~/CS 4375/project1/naive_bayes.R', echo=TRUE)
source('~/CS 4375/project1/naive_bayes.R', echo=TRUE)
source('~/CS 4375/project1/naive_bayes.R', echo=TRUE)
source('~/CS 4375/project1/naive_bayes.R', echo=TRUE)
source('~/CS 4375/project1/logistic_regression.R', echo=TRUE)
source('~/CS 4375/project1/naive_bayes.R', echo=TRUE)
source('~/CS 4375/project1/logistic_regression.R', echo=TRUE)
end_time <- Sys.time()
source('~/CS 4375/project1/logistic_regression.R', echo=TRUE)
source('~/CS 4375/project1/logistic_regression.R', echo=TRUE)
source('~/CS 4375/project1/logistic_regression.R', echo=TRUE)
source('~/CS 4375/project1/logistic_regression.R', echo=TRUE)
glm$iter
glm1$iter
source('~/CS 4375/project1/naive_bayes.R', echo=TRUE)
source('~/CS 4375/project1/naive_bayes.R', echo=TRUE)
source('~/CS 4375/project1/logistic_regression.R', echo=TRUE)
source('~/CS 4375/project1/naive_bayes.R', echo=TRUE)
